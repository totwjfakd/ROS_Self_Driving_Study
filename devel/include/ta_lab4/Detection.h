// Generated by gencpp from file ta_lab4/Detection.msg
// DO NOT EDIT!


#ifndef TA_LAB4_MESSAGE_DETECTION_H
#define TA_LAB4_MESSAGE_DETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ta_lab4
{
template <class ContainerAllocator>
struct Detection_
{
  typedef Detection_<ContainerAllocator> Type;

  Detection_()
    : x(0.0)
    , y(0.0)
    , w(0.0)
    , h(0.0)
    , error_center(0.0)
    , error_size(0.0)  {
    }
  Detection_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , w(0.0)
    , h(0.0)
    , error_center(0.0)
    , error_size(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _w_type;
  _w_type w;

   typedef double _h_type;
  _h_type h;

   typedef double _error_center_type;
  _error_center_type error_center;

   typedef double _error_size_type;
  _error_size_type error_size;





  typedef boost::shared_ptr< ::ta_lab4::Detection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ta_lab4::Detection_<ContainerAllocator> const> ConstPtr;

}; // struct Detection_

typedef ::ta_lab4::Detection_<std::allocator<void> > Detection;

typedef boost::shared_ptr< ::ta_lab4::Detection > DetectionPtr;
typedef boost::shared_ptr< ::ta_lab4::Detection const> DetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ta_lab4::Detection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ta_lab4::Detection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ta_lab4::Detection_<ContainerAllocator1> & lhs, const ::ta_lab4::Detection_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.w == rhs.w &&
    lhs.h == rhs.h &&
    lhs.error_center == rhs.error_center &&
    lhs.error_size == rhs.error_size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ta_lab4::Detection_<ContainerAllocator1> & lhs, const ::ta_lab4::Detection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ta_lab4

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ta_lab4::Detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ta_lab4::Detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ta_lab4::Detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ta_lab4::Detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ta_lab4::Detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ta_lab4::Detection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ta_lab4::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e34f6a3e4ec965d0bc49da004c6abdbc";
  }

  static const char* value(const ::ta_lab4::Detection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe34f6a3e4ec965d0ULL;
  static const uint64_t static_value2 = 0xbc49da004c6abdbcULL;
};

template<class ContainerAllocator>
struct DataType< ::ta_lab4::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ta_lab4/Detection";
  }

  static const char* value(const ::ta_lab4::Detection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ta_lab4::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 w\n"
"float64 h\n"
"float64 error_center\n"
"float64 error_size\n"
"\n"
"\n"
;
  }

  static const char* value(const ::ta_lab4::Detection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ta_lab4::Detection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.w);
      stream.next(m.h);
      stream.next(m.error_center);
      stream.next(m.error_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Detection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ta_lab4::Detection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ta_lab4::Detection_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "w: ";
    Printer<double>::stream(s, indent + "  ", v.w);
    s << indent << "h: ";
    Printer<double>::stream(s, indent + "  ", v.h);
    s << indent << "error_center: ";
    Printer<double>::stream(s, indent + "  ", v.error_center);
    s << indent << "error_size: ";
    Printer<double>::stream(s, indent + "  ", v.error_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TA_LAB4_MESSAGE_DETECTION_H
